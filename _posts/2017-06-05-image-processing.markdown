---
layout:     post
title:      "图像处理、分析与机器视觉"
subtitle:   "第5章 图像预处理"
date:       2017-06-04 12:00:00
author:     "HE"
header-img: "img/home-bg.jpg"
header-mask: 0.3
catalog:    true
tags:
    - 图像处理
    - 基础知识
---

### 像素亮度变换

**像素亮度变换：**

1. 亮度校正（要考虑该像素原来的亮度和其在图像中的位置）

2. 灰度级变换（无须考虑其在图像中的位置）

##### 位置相关的亮度校正

一个乘性的错误系数$$e(i,j)$$描述相对于理想的等同传递函数的变化。假定$$g(i,j)$$是原来没有退化的图像，$$f(i,j)$$是含有退化的图像。则

$$f(i,j)=e(i,j)g(i,j)$$

如果已知亮度的一幅参考图像（最简单就是具有不变的亮度$$c$$），则可获得错误系数$$e(i,j)$$，退化结果是图像$$f_{c}(i,j)$$，则

$$g(i,j)=\frac{f(i,j)}{e(i,j)}=\frac{cf(i,j)}{f_{c}(i,j)}$$

##### 灰度级变换

一个变换$$\Gamma$$，将原来在范围$$[p_{0},p_{k}]$$内的亮度$$p$$变换为一个新范围$$[q_{0},q_{k}]$$内的亮度$$q$$

$$q=\Gamma(p)$$

> 常见的灰度级变换：
>
> * 分段线性函数$$a$$增强了图像在亮度$$p_{1}$$和$$p_{2}$$之间的图像对比度
>
> * 函数$$b$$被称作亮度阈值化，其结果是黑白图像
>
> * 直线$$c$$代表负片（底片变换）
>
> ![常见的灰度级变换](/img/image-processing/gray-level-transformation.png)

### 几何变换

几何变换可以消除图像获取时所出现的几何变形。几何变换是一个矢量函数$$T$$，将一个像素$$(x,y)$$映射到一个新位置$$(x',y')$$

![几何变换](/img/image-processing/geometric-transformation.png)

几何变换的步骤

1. **像素坐标变换**，将输入图像像素映射到输出图像，输出点的坐标按照连续数值来计算（实数），因为变换后未必对应于数字栅格

2. **插值**，用领域中的几个点的亮度插值得到变换后的点匹配的数字光栅中的点的亮度

##### 像素坐标变换

几何变换输出点的坐标计算通常用多项式公式来近似：

$$x'=\sum_{r=0}^{m}\sum_{k=0}^{m-r}a_{rk}x^{r}y^{k}$$

$$y'=\sum_{r=0}^{m}\sum_{k=0}^{m-r}b_{rk}x^{r}y^{k}$$

几何变换作用在整个图像上时可能会改变坐标系，雅克比$$J$$提供了坐标系如何变化的信息

$$J=\left | \frac{\partial(x',y')}{\partial(x,y)} \right |=\begin{vmatrix}\frac{\partial x'}{\partial x} & \frac{\partial x'}{\partial y}\\\frac{\partial y'}{\partial x} & \frac{\partial y'}{\partial y}\end{vmatrix}$$

* **J=0：**变换是奇异的（没有逆）
* **J=1：**图像的面积在变换下具有不变性

> * **双线性变换**
> 
>   $$x'=a_{0}+a_{1}x+a_{2}y+a_{3}xy$$
>
>   $$y'=b_{0}+b_{1}x+b_{2}y+b_{3}xy$$
>
>   $$J=a_{1}b_{2}-a_{2}b_{1}+(a_{1}b_{3}-a_{3}b_{1})x+(a_{3}b_{2}-a_{2}b_{3})y$$
>
> * **仿射变换**
> 
>   $$x'=a_{0}+a_{1}x+a_{2}y$$
>
>   $$y'=b_{0}+b_{1}x+b_{2}y$$
>
>   $$J=a_{1}b_{2}-a_{2}b_{1}y$$
>
> * **旋转**（绕原点旋转角度$$\phi$$）
> 
>   $$x'=xcos\phi+ysin\phi$$
>
>   $$y'=-xsin\phi+ycos\phi$$
>
>   $$J=1$$
>
> * **变尺度**（$$x$$轴是$$a$$，$$y$$轴是$$b$$）
> 
>   $$x'=ax$$
>
>   $$y'=by$$
>
>   $$J=ab$$
>
> * **歪斜（斜切）**（歪斜角度$$\phi$$）
> 
>   $$x'=x+ytan\phi$$
>
>   $$y'=y$$
>
>   $$J=1$$

复杂的几何变换可以通过将图像分解为更小的矩形子图像来近似

##### 亮度插值

亮度插值问题用对偶的方法来表达，确定对应于输出图像离散光栅点在输入图像中原来的点的亮度

$$(x,y)=T^{-1}(x',y')$$

* **最近邻插值**，赋予点$$(x,y)$$以在离散光栅中离它最近的点g的亮度数值

  ![最近邻插值](/img/image-processing/nearest-neighborhood-interpolation.png)

  缺点：半个像素时定位误差最大，物体具有直线边界时在变换后可能会呈现阶梯状

* **线性插值**，赋予点$$(x,y)$$四个相邻点乘以对应权重的亮度数值
  
  ![线性插值](/img/image-processing/linear-interpolation.png)

  缺点：可能会引起小的分辨率降低和模糊。（但减轻了在最近邻插值中出现的阶梯状直边界的问题）

* **双三次插值**，用双三次多项式表面局部地近似亮度函数来改善其模型，用16个相邻的点作插值